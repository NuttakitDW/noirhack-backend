{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":10649605292669837124,"abi":{"parameters":[{"name":"g","type":{"kind":"field"},"visibility":"private"},{"name":"agg_pk","type":{"kind":"field"},"visibility":"public"},{"name":"deck","type":{"kind":"array","length":4,"type":{"kind":"array","length":2,"type":{"kind":"field"}}},"visibility":"public"},{"name":"rand","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"},{"name":"perm","type":{"kind":"array","length":4,"type":{"kind":"array","length":4,"type":{"kind":"field"}}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"array","length":2,"type":{"kind":"field"}}},"visibility":"public"},"error_types":{"7508837432899779258":{"error_kind":"string","string":"C1 must be non-zero"},"14319726244721739945":{"error_kind":"string","string":"generator g must be non‑zero"},"15267450079429782970":{"error_kind":"string","string":"aggregate public key must be non‑zero"}}},"bytecode":"","debug_symbols":"","file_map":{"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"61":{"source":"use shared::neff_shuffle::encrypt_and_shuffle_cards;\n\n/// g            : Field            - generator\n/// deck         : [[Field; 2]; 4]  - 4 cards, each `[c1, c2]`\n/// perm         : [[Field; 4]; 4]  - 4 x 4 permutation matrix (0/1)\n/// rand         : [Field; 4]       - per-card randomness\n/// agg_pk       : Field            - aggregate public key\nfn main(\n    g: Field,\n    agg_pk: pub Field,\n    deck: pub [[Field; 2]; 4],\n    rand: [Field; 4],\n    perm: [[Field; 4]; 4],\n) -> pub [[Field; 2]; 4] {\n    encrypt_and_shuffle_cards(g, agg_pk, deck, rand, perm)\n}\n\n#[test]\nfn test_main() {\n    let g: Field = 3;\n    let agg_pk: Field = 17;\n    let deck: [[Field; 2]; 4] = [[1, 10], [1, 20], [1, 30], [1, 40]];\n    let rand: [Field; 4] = [77, 88, 99, 111];\n    let perm: [[Field; 4]; 4] = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];\n\n    let out = main(g, agg_pk, deck, rand, perm);\n\n    // quick sanity check\n    for i in 0..4 {\n        assert(out[i][0] != 0);\n        assert(out[i][1] != 0);\n    }\n}\n","path":"/mnt/c/Users/latta/Desktop/rust/noir/neff-shuffle/crates/shuffle4/src/main.nr"},"62":{"source":"pub fn mul_NxN_by_Nx2<let N: u32>(a: [[Field; N]; N], b: [[Field; 2]; N]) -> [[Field; 2]; N] {\n    let mut c: [[Field; 2]; N] = [[0; 2]; N];\n    for i in 0..N {\n        for j in 0..2 {\n            let mut sum = 0;\n            for k in 0..N {\n                sum += a[i][k] * b[k][j];\n            }\n            c[i][j] = sum;\n        }\n    }\n    c\n}\n\n#[test]\nfn test_mul_4x4_by_4x2() {\n    let a: [[Field; 4]; 4] = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]];\n    let b: [[Field; 2]; 4] = [[1, 2], [3, 4], [5, 6], [7, 8]];\n\n    let result = mul_NxN_by_Nx2(a, b);\n    let expected: [[Field; 2]; 4] = [[50, 60], [114, 140], [178, 220], [242, 300]];\n\n    for i in 0..4 {\n        for j in 0..2 {\n            assert(result[i][j] == expected[i][j]);\n        }\n    }\n}\n\n#[test]\nfn test_mul_10x10_by_10x2() {\n    let a: [[Field; 10]; 10] = [\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],\n        [21, 22, 23, 24, 25, 26, 27, 28, 29, 30],\n        [31, 32, 33, 34, 35, 36, 37, 38, 39, 40],\n        [41, 42, 43, 44, 45, 46, 47, 48, 49, 50],\n        [51, 52, 53, 54, 55, 56, 57, 58, 59, 60],\n        [61, 62, 63, 64, 65, 66, 67, 68, 69, 70],\n        [71, 72, 73, 74, 75, 76, 77, 78, 79, 80],\n        [81, 82, 83, 84, 85, 86, 87, 88, 89, 90],\n        [91, 92, 93, 94, 95, 96, 97, 98, 99, 100],\n    ];\n    let b: [[Field; 2]; 10] =\n        [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]];\n\n    let result = mul_NxN_by_Nx2(a, b);\n    let expected: [[Field; 2]; 10] = [\n        [715, 770],\n        [1715, 1870],\n        [2715, 2970],\n        [3715, 4070],\n        [4715, 5170],\n        [5715, 6270],\n        [6715, 7370],\n        [7715, 8470],\n        [8715, 9570],\n        [9715, 10670],\n    ];\n\n    for i in 0..10 {\n        for j in 0..2 {\n            assert(result[i][j] == expected[i][j]);\n        }\n    }\n}\n","path":"/mnt/c/Users/latta/Desktop/rust/noir/neff-shuffle/crates/shared/src/algebra/matrix.nr"},"63":{"source":"pub mod matrix;\n\npub fn pow(base: Field, exponent: Field) -> Field {\n    let bits: [u1; 254] = exponent.to_le_bits();\n    let mut result = 1;\n    let mut power = base;\n\n    for i in 0..254 {\n        let bit = bits[i];\n        let term = if bit == 1 { power } else { 1 };\n        result *= term;\n        power *= power;\n    }\n    result\n}\n\npub fn enforce_permutation<let N: u32>(mat: [[Field; N]; N]) {\n    for i in 0..N {\n        for j in 0..N {\n            let c = mat[i][j];\n            assert(c * (c - 1) == 0);\n        }\n    }\n\n    for i in 0..N {\n        let mut row_sum = 0;\n        for j in 0..N {\n            row_sum += mat[i][j];\n        }\n        assert(row_sum == 1);\n    }\n\n    for j in 0..N {\n        let mut col_sum = 0;\n        for i in 0..N {\n            col_sum += mat[i][j];\n        }\n        assert(col_sum == 1);\n    }\n}\n\n#[test]\nfn test_pow() {\n    // 10^9  where exponent is passed as Field\n    let exp_field: Field = 9;\n    let r = pow(10, exp_field);\n\n    let mut exp: Field = 1;\n    for _ in 0..9 {\n        exp *= 10;\n    }\n    assert(r == exp);\n\n    // max exponent\n    let base: Field = 7;\n    let e: Field = (-1 as i64) as Field;\n    let r: Field = pow(base, e);\n    let r_next_left = pow(base, e + 1);\n    let r_next_right = r * base;\n    assert(r_next_left == r_next_right);\n}\n\n#[test]\nfn test_pow_max_exponent() {\n    let base: Field = 7;\n\n    let e: Field = (-1 as i64) as Field;\n\n    let r: Field = pow(base, e);\n\n    let r_next_left = pow(base, e + 1);\n    let r_next_right = r * base;\n\n    assert(r_next_left == r_next_right);\n}\n\n#[test]\nfn test_enforce_perm_u10_perm_4_ok() {\n    let p: [[Field; 4]; 4] = [[0, 1, 0, 0], [0, 0, 0, 1], [1, 0, 0, 0], [0, 0, 1, 0]];\n    enforce_permutation(p);\n}\n\n#[test(should_fail)]\nfn test_enforce_perm_u10_perm_5_bad() {\n    let bad: [[Field; 5]; 5] =\n        [[1, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0], [0, 0, 0, 0, 1], [0, 1, 0, 0, 0]];\n    enforce_permutation(bad);\n}\n","path":"/mnt/c/Users/latta/Desktop/rust/noir/neff-shuffle/crates/shared/src/algebra/mod.nr"},"64":{"source":"use crate::algebra::pow;\nuse crate::utils::gen_public_key_and_aggregate_key;\n\n/// Minimal ElGamal encryption for one card using.\n///\n/// msg   = [c1, c2]   (fresh card uses [1, m]), public input\n/// g     = generator  (Field, e.g. 3)\n/// pk    = public key h = g^sk, public input\n/// rand  = y in [0,255] (u256 nonce)\n/// ret   = [c1, c2]   ciphertext\npub fn encrypt(g: Field, pk: Field, msg: [Field; 2], rand: Field) -> [Field; 2] {\n    let g_pow_y: Field = pow(g, rand);\n    let h_pow_y: Field = pow(pk, rand);\n\n    let c1: Field = msg[0] * g_pow_y;\n    assert(c1 != 0, \"C1 must be non-zero\");\n\n    let c2: Field = msg[1] * h_pow_y;\n    [c1, c2]\n}\n\n/// Minimal ElGamal partial-decryption for one card.\n///\n/// g           = generator  (Field, e.g. 3)\n/// ciphertext  = [c1, c2]   ciphertext input, public input\n/// sk          = secret key x (Field, u256)\n/// ret         = (pk, [c1, m]) where pk = g^x and m = c2 / c1^x\npub fn decrypt(g: Field, ciphertext: [Field; 2], sk: Field) -> (Field, [Field; 2]) {\n    // pk  = g^sk\n    let pk: Field = pow(g, sk);\n\n    // c1^sk\n    let card_exp: Field = pow(ciphertext[0], sk);\n\n    // message[0] stays as c1\n    let m1: Field = ciphertext[0];\n\n    // message[1] = c2 / c1^sk\n    let m2: Field = ciphertext[1] / card_exp;\n\n    // equality constraint   m2 * card_exp == c2\n    assert(m2 * card_exp == ciphertext[1]);\n\n    (pk, [m1, m2])\n}\n\n/// Computes a decryption component for ElGamal.\n///\n/// c1  = g^r (first part of the ciphertext)\n/// sk  = one share of the secret key (Field)\n///\n/// ret = c1^sk, which contributes to recovering m = c2 / c1^sk\npub fn calculate_decrypt_component(c1: Field, sk: Field) -> Field {\n    pow(c1, sk)\n}\n\n#[test]\nfn test_encrypt_single_card() {\n    let g: Field = 3;\n    let sk: Field = 17;\n    let h: Field = pow(g, sk); // public key h = g^sk\n\n    let plain: [Field; 2] = [1, 42];\n    let rand: Field = 77.into(); // fresh nonce\n\n    let ct = encrypt(g, h, plain, rand);\n\n    // C1 should equal g^rand\n    assert(ct[0] == pow(g, rand));\n\n    // C2 should equal 42 * h^rand\n    let expected_c2 = 42 * pow(h, rand);\n    assert(ct[1] == expected_c2);\n}\n\n#[test]\nfn test_encrypt_then_decrypt_once() {\n    let g: Field = 3;\n\n    // secret key and derived public key\n    let sk: Field = 22.into();\n    let pk: Field = pow(g, sk);\n\n    // plaintext card  (fresh card => [1, m])\n    let plain: [Field; 2] = [1, 99];\n\n    // encrypt with random y\n    let rand: Field = 77.into();\n    let ct = encrypt(g, pk, plain, rand);\n\n    // decrypt\n    let (recovered_pk, msg) = decrypt(g, ct, sk);\n\n    // pk round-trip check\n    assert(recovered_pk == pk);\n\n    // message limb (index 1) should equal original m = 99\n    assert(msg[1] == plain[1]);\n\n    // the first limb is still c1 = g^rand, so this holds instead:\n    assert(msg[0] == ct[0]);\n}\n\n#[test]\npub fn test_2_layered_onion_encryption_decryption() {\n    // Generator value and secret keys\n    let g: Field = 3; // Example generator\n    let sk1: Field = 22.into(); // Player 1's secret key\n    let sk2: Field = 33.into(); // Player 2's secret key\n\n    // Initial aggregated key (starts with 1)\n    let old_aggk: Field = 1.into();\n\n    // Generate public keys and aggregated key using the new function\n    let (pk1, agg_pk1) = gen_public_key_and_aggregate_key(g, sk1, old_aggk); // Player 1's public key and aggregated key\n    let (pk2, agg_pk2) = gen_public_key_and_aggregate_key(g, sk2, agg_pk1); // Player 2's public key and aggregated key\n\n    // At this point, agg_pk2 is the final aggregated public key\n    let agg_pk: Field = agg_pk2; // The final aggregated public key after both players\n\n    // Initial message (fresh card with 1 and message m)\n    let m: Field = 99.into();\n    let plain: [Field; 2] = [1.into(), m]; // Initial message is [1, m]\n\n    // Player 1 encrypts the message using the aggregate public key\n    let rand1: Field = 77.into(); // Random value for Player 1\n    let ct1 = encrypt(g, agg_pk, plain, rand1);\n    // println(f\"Player 1 encryption (ct1): {ct1}\");\n\n    // Player 2 encrypts the ciphertext (ct1) using the aggregate public key\n    let rand2: Field = 88.into(); // Random value for Player 2\n    let ct2 = encrypt(g, agg_pk, ct1, rand2);\n    // println(f\"Player 2 encryption (ct2): {ct2}\");\n\n    // Player 2 decrypts the ciphertext (ct2) using their secret key sk2\n    let (recovered_pk2, msg2) = decrypt(g, ct2, sk2);\n    // println(f\"Player 2 decryption (msg2): {msg2}\");\n    // println(f\"Recovered public key (Player 2): {recovered_pk2}\");\n\n    // Player 1 decrypts the ciphertext (msg2) using their secret key sk1 to get back the original message\n    let (recovered_pk1, msg3) = decrypt(g, msg2, sk1);\n    // println(f\"Player 1 decryption (msg3): {msg3}\");\n    // println(f\"Recovered public key (Player 1): {recovered_pk1}\");\n\n    assert(recovered_pk2 == pk2, \"Decrypted public key does not match original public key\");\n    assert(recovered_pk1 == pk1, \"Decrypted public key does not match original public key\");\n\n    // Verifying that the final decrypted message matches the original plaintext\n    assert(msg3[1] == m, \"Decrypted message does not match original message\");\n}\n\n#[test]\npub fn test_3_layered_onion_encryption_decryption() {\n    // Generator value and secret keys\n    let g: Field = 3; // Example generator\n    let sk1: Field = 22.into(); // Player 1's secret key\n    let sk2: Field = 33.into(); // Player 2's secret key\n    let sk3: Field = 44.into(); // Player 3's secret key\n\n    // Initial aggregated key (starts with 1)\n    let old_aggk: Field = 1.into();\n\n    // Generate public keys and aggregated key using the new function\n    let (pk1, agg_pk1) = gen_public_key_and_aggregate_key(g, sk1, old_aggk); // Player 1's public key and aggregated key\n    let (pk2, agg_pk2) = gen_public_key_and_aggregate_key(g, sk2, agg_pk1); // Player 2's public key and aggregated key\n    let (pk3, agg_pk3) = gen_public_key_and_aggregate_key(g, sk3, agg_pk2); // Player 3's public key and aggregated key\n\n    // At this point, agg_pk3 is the final aggregated public key\n    let agg_pk: Field = agg_pk3; // The final aggregated public key after all players\n\n    // Initial message (fresh card with 1 and message m)\n    let m: Field = 1234567890.into();\n    let plain: [Field; 2] = [1.into(), m]; // Initial message is [1, m]\n\n    // Player 1 encrypts the message using the aggregate public key\n    let rand1: Field = 77.into(); // Random value for Player 1\n    let ct1 = encrypt(g, agg_pk, plain, rand1);\n    // println(f\"Player 1 encryption (ct1): {ct1}\");\n\n    // Player 2 encrypts the ciphertext (ct1) using the aggregate public key\n    let rand2: Field = 88.into(); // Random value for Player 2\n    let ct2 = encrypt(g, agg_pk, ct1, rand2);\n    // println(f\"Player 2 encryption (ct2): {ct2}\");\n\n    // Player 3 encrypts the ciphertext (ct2) using the aggregate public key\n    let rand3: Field = 99.into(); // Random value for Player 3\n    let ct3 = encrypt(g, agg_pk, ct2, rand3);\n    // println(f\"Player 3 encryption (ct3): {ct3}\");\n\n    // Player 3 decrypts the ciphertext (ct3) using their secret key sk3\n    let (recovered_pk3, msg3) = decrypt(g, ct3, sk3);\n    // println(f\"Player 3 decryption (msg3): {msg3}\");\n    // println(f\"Recovered public key (Player 3): {recovered_pk3}\");\n\n    // Player 2 decrypts the ciphertext (msg3) using their secret key sk2\n    let (recovered_pk2, msg2) = decrypt(g, msg3, sk2);\n    // println(f\"Player 2 decryption (msg2): {msg2}\");\n    // println(f\"Recovered public key (Player 2): {recovered_pk2}\");\n\n    // Player 1 decrypts the ciphertext (msg2) using their secret key sk1 to get back the original message\n    let (recovered_pk1, msg1) = decrypt(g, msg2, sk1);\n    // println(f\"Player 1 decryption (msg1): {msg1}\");\n    // println(f\"Recovered public key (Player 1): {recovered_pk1}\");\n\n    assert(recovered_pk3 == pk3, \"Decrypted public key does not match original public key\");\n    assert(recovered_pk2 == pk2, \"Decrypted public key does not match original public key\");\n    assert(recovered_pk1 == pk1, \"Decrypted public key does not match original public key\");\n\n    // Verifying that the final decrypted message matches the original plaintext\n    assert(msg1[1] == m, \"Decrypted message does not match original message\");\n}\n\n#[test]\npub fn test_calculate_decrypt_component_matches_direct_decrypt_2_layered_onion_encryption_decryption() {\n    let g: Field = 3;\n    let sk1: Field = 11.into();\n    let sk2: Field = 22.into();\n\n    // Start with aggregate key = 1, then sequentially add each pk\n    let old_aggk: Field = 1.into();\n    let (_pk1, agg_pk1) = gen_public_key_and_aggregate_key(g, sk1, old_aggk);\n    let (_pk2, agg_pk) = gen_public_key_and_aggregate_key(g, sk2, agg_pk1); // Final aggregate pk = g^{sk1 + sk2}\n\n    let m: Field = 64.into();\n    let plain: [Field; 2] = [1.into(), m];\n    let rand: Field = 77.into();\n\n    let ciphertext = encrypt(g, agg_pk, plain, rand);\n    let c1 = ciphertext[0];\n    let c2 = ciphertext[1];\n\n    // Each player computes their decrypt component\n    let share1 = calculate_decrypt_component(c1, sk1); // c1^sk1\n    let share2 = calculate_decrypt_component(c1, sk2); // c1^sk2\n\n    // Combine shares: m = c2 / (share1 * share2)\n    let decrypted_msg = c2 / share1 / share2;\n    println(f\"Decryption Result: got {decrypted_msg}, expected {m}\");\n\n    // Check correctness\n    assert(decrypted_msg == m, f\"Decryption failed: got {decrypted_msg}, expected {m}\");\n}\n","path":"/mnt/c/Users/latta/Desktop/rust/noir/neff-shuffle/crates/shared/src/elgamal.nr"},"66":{"source":"use crate::algebra::enforce_permutation;\nuse crate::algebra::matrix::mul_NxN_by_Nx2;\nuse crate::elgamal::{calculate_decrypt_component, decrypt, encrypt};\nuse crate::utils::gen_public_key_and_aggregate_key;\n\npub fn encrypt_and_shuffle_cards<let N: u32>(\n    g: Field,\n    agg_pk: Field,\n    deck: [[Field; 2]; N],\n    randomness: [Field; N],\n    permutation_matrix: [[Field; N]; N],\n) -> [[Field; 2]; N] {\n    assert(g != 0, \"generator g must be non‑zero\");\n    assert(agg_pk != 0, \"aggregate public key must be non‑zero\");\n\n    enforce_permutation(permutation_matrix);\n\n    let mut encrypted_deck: [[Field; 2]; N] = [[0, 0]; N];\n    for i in 0..N {\n        let encrypted_card = encrypt(g, agg_pk, [deck[i][0], deck[i][1]], randomness[i]);\n        encrypted_deck[i][0] = encrypted_card[0];\n        encrypted_deck[i][1] = encrypted_card[1];\n    }\n\n    let shuffled_deck = mul_NxN_by_Nx2(permutation_matrix, encrypted_deck);\n\n    shuffled_deck\n}\n\npub fn decrypt_cards<let N: u32>(\n    generator: Field,\n    deck_to_unmask: [[Field; 2]; N],\n    sk: Field,\n) -> ([[Field; 2]; N], Field) {\n    let mut unmasked_deck: [[Field; 2]; N] = [[0; 2]; N];\n    let mut pk: Field = 0;\n\n    for i in 0..N {\n        let (card_pk, decrypted_card) = decrypt(generator, deck_to_unmask[i], sk);\n        unmasked_deck[i][0] = decrypted_card[0];\n        unmasked_deck[i][1] = decrypted_card[1];\n\n        // Set the public key from the first card\n        if i == 0 {\n            pk = card_pk;\n        }\n    }\n\n    (unmasked_deck, pk)\n}\n\n#[test]\npub fn test_1_layered_encrypt_and_shuffle_4_cards() {\n    // Generator value and secret keys\n    let g: Field = 3; // Example generator\n    let sk: Field = 22; // Secret key for decryption\n\n    // Example deck (4 cards) with initial values [1, m]\n    let deck: [[Field; 2]; 4] = [[1, 10], [1, 20], [1, 30], [1, 40]];\n\n    // Randomness values for encryption\n    let randomness: [Field; 4] = [77, 88, 99, 111];\n\n    let permutation_matrix: [[Field; 4]; 4] =\n        [[1, 0, 0, 0], [0, 0, 0, 1], [0, 1, 0, 0], [0, 0, 1, 0]];\n\n    // Generate public key and aggregated key using the new function\n    let (_, agg_pk) = gen_public_key_and_aggregate_key(g, sk, 1); // Aggregate public key\n\n    // Encrypt and shuffle the deck\n    let shuffled_encrypted_deck =\n        encrypt_and_shuffle_cards(g, agg_pk, deck, randomness, permutation_matrix);\n    // println(f\"Shuffled and Encrypted Deck: {shuffled_encrypted_deck}\");\n\n    // Decrypt the shuffled deck using the secret key\n    let (unmasked_deck, _) = decrypt_cards(g, shuffled_encrypted_deck, sk);\n    // println(f\"Unmasked Deck after Decryption: {unmasked_deck}\");\n\n    // Debugging output to track values at each step\n    for i in 0..4 {\n        let deck_i_second = deck[i][1];\n        let unmasked_deck_i_second = unmasked_deck[i][1];\n        let i_plus_1 = i + 1;\n        println(\n            f\"Original card {i_plus_1}: {deck_i_second}, Decrypted card {i_plus_1}: {unmasked_deck_i_second}\",\n        );\n    }\n\n    assert(unmasked_deck[0][1] == deck[0][1]);\n    assert(unmasked_deck[1][1] == deck[3][1]);\n    assert(unmasked_deck[2][1] == deck[1][1]);\n    assert(unmasked_deck[3][1] == deck[2][1]);\n}\n\n#[test]\npub fn test_1_layered_encrypt_and_shuffle_10_cards() {\n    // Generator value and secret keys\n    let g: Field = 3; // Example generator\n    let sk: Field = 22; // Secret key for decryption\n\n    // Example deck (5 cards) with initial values [1, m]\n    let deck: [[Field; 2]; 10] =\n        [[1, 10], [1, 20], [1, 30], [1, 40], [1, 50], [1, 60], [1, 70], [1, 80], [1, 90], [1, 100]];\n\n    // Randomness values for encryption\n    let randomness: [Field; 10] = [77, 88, 99, 111, 222, 333, 444, 555, 666, 777];\n\n    let permutation_matrix: [[Field; 10]; 10] = [\n        [0, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 1, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\n        [0, 0, 0, 0, 0, 1, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\n    ];\n\n    // Generate public key and aggregated key using the new function\n    let (_, agg_pk) = gen_public_key_and_aggregate_key(g, sk, 1); // Aggregate public key\n\n    // Encrypt and shuffle the deck\n    let shuffled_encrypted_deck =\n        encrypt_and_shuffle_cards(g, agg_pk, deck, randomness, permutation_matrix);\n    // println(f\"Shuffled and Encrypted Deck: {shuffled_encrypted_deck}\");\n\n    // Decrypt the shuffled deck using the secret key\n    let (unmasked_deck, _) = decrypt_cards(g, shuffled_encrypted_deck, sk);\n    // println(f\"Unmasked Deck after Decryption: {unmasked_deck}\");\n\n    // Debugging output to track values at each step\n    for i in 0..10 {\n        let deck_i_second = deck[i][1];\n        let unmasked_deck_i_second = unmasked_deck[i][1];\n        let i_plus_1 = i + 1;\n        println(\n            f\"Original card {i_plus_1}: {deck_i_second}, Decrypted card {i_plus_1}: {unmasked_deck_i_second}\",\n        );\n    }\n\n    assert(unmasked_deck[0][1] == deck[6][1]);\n    assert(unmasked_deck[1][1] == deck[9][1]);\n    assert(unmasked_deck[2][1] == deck[0][1]);\n    assert(unmasked_deck[3][1] == deck[2][1]);\n    assert(unmasked_deck[4][1] == deck[4][1]);\n    assert(unmasked_deck[5][1] == deck[1][1]);\n    assert(unmasked_deck[6][1] == deck[3][1]);\n    assert(unmasked_deck[7][1] == deck[7][1]);\n    assert(unmasked_deck[8][1] == deck[5][1]);\n    assert(unmasked_deck[9][1] == deck[8][1]);\n}\n\n#[test]\npub fn test_4_layered_encrypt_and_shuffle_4_cards() {\n    // Generator value and secret keys\n    let g: Field = 3; // Example generator\n    let sk1: Field = 22.into(); // Player 1's secret key\n    let sk2: Field = 33.into(); // Player 2's secret key\n    let sk3: Field = 44.into(); // Player 3's secret key\n    let sk4: Field = 55.into(); // Player 4's secret key\n\n    // Example deck (4 cards) with initial values [1, m]\n    let deck: [[Field; 2]; 4] =\n        [[1.into(), 1.into()], [1.into(), 2.into()], [1.into(), 3.into()], [1.into(), 4.into()]];\n\n    // Randomness values for encryption\n    let randomness1: [Field; 4] = [\n        53487589437593485734.into(),\n        54353456564565645345.into(),\n        543534553656456456.into(),\n        5465654634543534534453345.into(),\n    ];\n    let randomness2: [Field; 4] = [\n        667567456534645.into(),\n        543534565665465545645645665645345.into(),\n        5435345656456353656456456.into(),\n        5465654654534534534543534534453345.into(),\n    ];\n    let randomness3: [Field; 4] = [\n        6456455634543534.into(),\n        625436356536.into(),\n        674567466345634534.into(),\n        76745634556345345346.into(),\n    ];\n    let randomness4: [Field; 4] = [\n        78658456753463456.into(),\n        7864575464352345.into(),\n        35425465745676467.into(),\n        675467456656456456.into(),\n    ];\n\n    // Identity permutation matrix (4x4) for simplicity\n    let permutation_matrix1: [[Field; 4]; 4] =\n        [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];\n    let permutation_matrix2: [[Field; 4]; 4] =\n        [[0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1], [1, 0, 0, 0]];\n    let permutation_matrix3: [[Field; 4]; 4] =\n        [[0, 0, 0, 1], [0, 0, 1, 0], [0, 1, 0, 0], [1, 0, 0, 0]];\n    let permutation_matrix4: [[Field; 4]; 4] =\n        [[0, 0, 1, 0], [0, 0, 0, 1], [0, 1, 0, 0], [1, 0, 0, 0]];\n\n    // Generate public keys and aggregated key for four players\n    let (_, agg_pk1) = gen_public_key_and_aggregate_key(g, sk1, 1.into()); // Player 1's public key and aggregated key\n    let (_, agg_pk2) = gen_public_key_and_aggregate_key(g, sk2, agg_pk1); // Player 2's public key and aggregated key\n    let (_, agg_pk3) = gen_public_key_and_aggregate_key(g, sk3, agg_pk2); // Player 3's public key and aggregated key\n    let (_, agg_pk4) = gen_public_key_and_aggregate_key(g, sk4, agg_pk3); // Player 4's public key and aggregated key\n\n    // The final aggregate public key after all players\n    let agg_pk: Field = agg_pk4; // Aggregate public key\n\n    // Encrypt and shuffle the deck with 4 layers, shuffle the deck between each layer\n    let shuffled_encrypted_deck1 =\n        encrypt_and_shuffle_cards(g, agg_pk, deck, randomness1, permutation_matrix1);\n    // println(\n    //     f\"Shuffled and Encrypted Deck after Player 1 Encryption: {shuffled_encrypted_deck1}\",\n    // );\n\n    // Player 2 encrypts the shuffled deck (with a re-shuffle)\n    let shuffled_encrypted_deck2 = encrypt_and_shuffle_cards(\n        g,\n        agg_pk,\n        shuffled_encrypted_deck1,\n        randomness2,\n        permutation_matrix2,\n    );\n    // println(\n    //     f\"Shuffled and Encrypted Deck after Player 2 Encryption: {shuffled_encrypted_deck2}\",\n    // );\n\n    // Player 3 encrypts the shuffled deck (with a re-shuffle)\n    let shuffled_encrypted_deck3 = encrypt_and_shuffle_cards(\n        g,\n        agg_pk,\n        shuffled_encrypted_deck2,\n        randomness3,\n        permutation_matrix3,\n    );\n    // println(\n    //     f\"Shuffled and Encrypted Deck after Player 3 Encryption: {shuffled_encrypted_deck3}\",\n    // );\n\n    // Player 4 encrypts the shuffled deck (with a re-shuffle)\n    let shuffled_encrypted_deck4 = encrypt_and_shuffle_cards(\n        g,\n        agg_pk,\n        shuffled_encrypted_deck3,\n        randomness4,\n        permutation_matrix4,\n    );\n    // println(\n    //     f\"Shuffled and Encrypted Deck after Player 4 Encryption: {shuffled_encrypted_deck4}\",\n    // );\n\n    // Player 4 decrypts the shuffled deck using their secret key\n    let (unmasked_deck4, _) = decrypt_cards(g, shuffled_encrypted_deck4, sk4);\n    // println(f\"Unmasked Deck after Player 4 Decryption: {unmasked_deck4}\");\n\n    // Player 3 decrypts the deck after Player 4's decryption using Player 3's secret key\n    let (unmasked_deck3, _) = decrypt_cards(g, unmasked_deck4, sk3);\n    // println(f\"Unmasked Deck after Player 3 Decryption: {unmasked_deck3}\");\n\n    // Player 2 decrypts the deck after Player 3's decryption using Player 2's secret key\n    let (unmasked_deck2, _) = decrypt_cards(g, unmasked_deck3, sk2);\n    // println(f\"Unmasked Deck after Player 2 Decryption: {unmasked_deck2}\");\n\n    // Player 1 decrypts the deck after Player 2's decryption using Player 1's secret key\n    let (unmasked_deck1, _) = decrypt_cards(g, unmasked_deck2, sk1);\n    // println(f\"Unmasked Deck after Player 1 Decryption: {unmasked_deck1}\");\n\n    // Debugging output to track values at each step\n    for i in 0..4 {\n        let deck_i_second = deck[i][1];\n        let unmasked_deck_i_second = unmasked_deck1[i][1];\n        let i_plus_1 = i + 1;\n        println(\n            f\"Original card {i_plus_1}: {deck_i_second}, Decrypted card {i_plus_1}: {unmasked_deck_i_second}\",\n        );\n    }\n\n    assert(unmasked_deck1[0][1] == deck[2][1]);\n    assert(unmasked_deck1[1][1] == deck[1][1]);\n    assert(unmasked_deck1[2][1] == deck[3][1]);\n    assert(unmasked_deck1[3][1] == deck[0][1]);\n}\n\n#[test]\npub fn test_decrypt_each_card_by_peeling_layers_with_decrypt_function() {\n    // ---------- setup - same parameters used in the onion-encryption test ----------\n    let g: Field = 3;\n    let sk1: Field = 22.into();\n    let sk2: Field = 33.into();\n    let sk3: Field = 44.into();\n    let sk4: Field = 55.into();\n\n    // original deck: card values 1,2,3,4   (each card is [1, m])\n    let deck: [[Field; 2]; 4] =\n        [[1.into(), 1.into()], [1.into(), 2.into()], [1.into(), 3.into()], [1.into(), 4.into()]];\n\n    // randomness and permutation matrices exactly as in\n    // `test_4_layered_encrypt_and_shuffle_4_cards`\n    let randomness1: [Field; 4] = [\n        53487589437593485734.into(),\n        54353456564565645345.into(),\n        543534553656456456.into(),\n        5465654634543534534453345.into(),\n    ];\n    let randomness2: [Field; 4] = [\n        667567456534645.into(),\n        543534565665465545645645665645345.into(),\n        5435345656456353656456456.into(),\n        5465654654534534534543534534453345.into(),\n    ];\n    let randomness3: [Field; 4] = [\n        6456455634543534.into(),\n        625436356536.into(),\n        674567466345634534.into(),\n        76745634556345345346.into(),\n    ];\n    let randomness4: [Field; 4] = [\n        78658456753463456.into(),\n        7864575464352345.into(),\n        35425465745676467.into(),\n        675467456656456456.into(),\n    ];\n\n    let perm1: [[Field; 4]; 4] = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];\n    let perm2: [[Field; 4]; 4] = [[0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1], [1, 0, 0, 0]];\n    let perm3: [[Field; 4]; 4] = [[0, 0, 0, 1], [0, 0, 1, 0], [0, 1, 0, 0], [1, 0, 0, 0]];\n    let perm4: [[Field; 4]; 4] = [[0, 0, 1, 0], [0, 0, 0, 1], [0, 1, 0, 0], [1, 0, 0, 0]];\n\n    // aggregate public-key g^(sk1+sk2+sk3+sk4)\n    let (_, agg1) = gen_public_key_and_aggregate_key(g, sk1, 1.into());\n    let (_, agg2) = gen_public_key_and_aggregate_key(g, sk2, agg1);\n    let (_, agg3) = gen_public_key_and_aggregate_key(g, sk3, agg2);\n    let (_, agg_pk) = gen_public_key_and_aggregate_key(g, sk4, agg3);\n\n    // ---------- four-layer onion encryption & shuffling (same as before) ----------\n    let enc1 = encrypt_and_shuffle_cards(g, agg_pk, deck, randomness1, perm1);\n    let enc2 = encrypt_and_shuffle_cards(g, agg_pk, enc1, randomness2, perm2);\n    let enc3 = encrypt_and_shuffle_cards(g, agg_pk, enc2, randomness3, perm3);\n    let enc4 = encrypt_and_shuffle_cards(g, agg_pk, enc3, randomness4, perm4);\n    let final_encrypted_deck = enc4; // what every player sees\n\n    // ---------- reference cleartext using the original \"peel layers with full sk\" ----------\n    // (so we know the ground-truth card values after all four decryptions)\n    let (d4, _) = decrypt_cards(g, final_encrypted_deck, sk4);\n    // println(f\"d4: {d4}\");\n    let (d3, _) = decrypt_cards(g, d4, sk3);\n    // println(f\"d3: {d3}\");\n    let (d2, _) = decrypt_cards(g, d3, sk2);\n    // println(f\"d2: {d2}\");\n    let (clear_deck, _) = decrypt_cards(g, d2, sk1); // ground truth\n\n    println(f\"clear_deck: {clear_deck}\");\n\n    // -----------------------------------------------------------------------------\n    // Individually decrypt each final ciphertext by peeling the four layers\n    // with the appropriate secret-key share order for that card.\n    // -----------------------------------------------------------------------------\n\n    // ----- Card 1: ask shares in order sk4 -> sk3 -> sk2 -> sk1 ----------------------\n    let (_, dc_1_4) = decrypt(g, final_encrypted_deck[0], sk4);\n    let (_, dc_1_3) = decrypt(g, dc_1_4, sk3);\n    let (_, dc_1_2) = decrypt(g, dc_1_3, sk2);\n    let (_, dc_1_1) = decrypt(g, dc_1_2, sk1); // player-1's own share last\n    let decrypted_card_1 = dc_1_1[1];\n    println(f\"decrypted card 1: {decrypted_card_1}\");\n    assert(clear_deck[0][1] == decrypted_card_1);\n\n    // ----- Card 2: shares sk4 -> sk3 -> sk1 -> sk2 ----------------------------------\n    let (_, dc_2_4) = decrypt(g, final_encrypted_deck[1], sk4);\n    let (_, dc_2_3) = decrypt(g, dc_2_4, sk3);\n    let (_, dc_2_2) = decrypt(g, dc_2_3, sk1);\n    let (_, dc_2_1) = decrypt(g, dc_2_2, sk2); // player-2's own share last\n    let decrypted_card_2 = dc_2_1[1];\n    println(f\"decrypted card 2: {decrypted_card_2}\");\n    assert(clear_deck[1][1] == decrypted_card_2);\n\n    // ----- Card 3: shares sk4 -> sk2 -> sk1 -> sk3 ----------------------------------\n    let (_, dc_3_4) = decrypt(g, final_encrypted_deck[2], sk4);\n    let (_, dc_3_3) = decrypt(g, dc_3_4, sk2);\n    let (_, dc_3_2) = decrypt(g, dc_3_3, sk1);\n    let (_, dc_3_1) = decrypt(g, dc_3_2, sk3); // player-3's own share last\n    let decrypted_card_3 = dc_3_1[1];\n    println(f\"decrypted card 3: {decrypted_card_3}\");\n    assert(clear_deck[2][1] == decrypted_card_3);\n\n    // ----- Card 4: shares sk3 -> sk2 -> sk1 -> sk4 ----------------------------------\n    let (_, dc_4_4) = decrypt(g, final_encrypted_deck[3], sk3);\n    let (_, dc_4_3) = decrypt(g, dc_4_4, sk2);\n    let (_, dc_4_2) = decrypt(g, dc_4_3, sk1);\n    let (_, dc_4_1) = decrypt(g, dc_4_2, sk4); // player-4's own share last\n    let decrypted_card_4 = dc_4_1[1];\n    println(f\"decrypted card 4: {decrypted_card_4}\");\n    assert(clear_deck[3][1] == decrypted_card_4);\n}\n\n#[test]\npub fn test_decrypt_each_card_with_decrypt_components() {\n    // ---------- setup - same parameters used in the onion-encryption test ----------\n    let g: Field = 3;\n    let sk1: Field = 22.into();\n    let sk2: Field = 33.into();\n    let sk3: Field = 44.into();\n    let sk4: Field = 55.into();\n\n    // original deck: card values 1,2,3,4   (each card is [1, m])\n    let deck: [[Field; 2]; 4] =\n        [[1.into(), 1.into()], [1.into(), 2.into()], [1.into(), 3.into()], [1.into(), 4.into()]];\n\n    // randomness and permutation matrices exactly as in\n    // `test_4_layered_encrypt_and_shuffle_4_cards`\n    let randomness1: [Field; 4] = [\n        53487589437593485734.into(),\n        54353456564565645345.into(),\n        543534553656456456.into(),\n        5465654634543534534453345.into(),\n    ];\n    let randomness2: [Field; 4] = [\n        667567456534645.into(),\n        543534565665465545645645665645345.into(),\n        5435345656456353656456456.into(),\n        5465654654534534534543534534453345.into(),\n    ];\n    let randomness3: [Field; 4] = [\n        6456455634543534.into(),\n        625436356536.into(),\n        674567466345634534.into(),\n        76745634556345345346.into(),\n    ];\n    let randomness4: [Field; 4] = [\n        78658456753463456.into(),\n        7864575464352345.into(),\n        35425465745676467.into(),\n        675467456656456456.into(),\n    ];\n\n    let perm1: [[Field; 4]; 4] = [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]];\n    let perm2: [[Field; 4]; 4] = [[0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1], [1, 0, 0, 0]];\n    let perm3: [[Field; 4]; 4] = [[0, 0, 0, 1], [0, 0, 1, 0], [0, 1, 0, 0], [1, 0, 0, 0]];\n    let perm4: [[Field; 4]; 4] = [[0, 0, 1, 0], [0, 0, 0, 1], [0, 1, 0, 0], [1, 0, 0, 0]];\n\n    // aggregate public-key g^(sk1+sk2+sk3+sk4)\n    let (_, agg1) = gen_public_key_and_aggregate_key(g, sk1, 1.into());\n    let (_, agg2) = gen_public_key_and_aggregate_key(g, sk2, agg1);\n    let (_, agg3) = gen_public_key_and_aggregate_key(g, sk3, agg2);\n    let (_, agg_pk) = gen_public_key_and_aggregate_key(g, sk4, agg3);\n\n    // ---------- four-layer onion encryption & shuffling (same as before) ----------\n    let enc1 = encrypt_and_shuffle_cards(g, agg_pk, deck, randomness1, perm1);\n    let enc2 = encrypt_and_shuffle_cards(g, agg_pk, enc1, randomness2, perm2);\n    let enc3 = encrypt_and_shuffle_cards(g, agg_pk, enc2, randomness3, perm3);\n    let enc4 = encrypt_and_shuffle_cards(g, agg_pk, enc3, randomness4, perm4);\n    let final_encrypted_deck = enc4; // what every player sees\n\n    // ---------- reference cleartext using the original \"peel layers with full sk\" ----------\n    // (so we know the ground-truth card values after all four decryptions)\n    let (d4, _) = decrypt_cards(g, final_encrypted_deck, sk4);\n    // println(f\"d4: {d4}\");\n    let (d3, _) = decrypt_cards(g, d4, sk3);\n    // println(f\"d3: {d3}\");\n    let (d2, _) = decrypt_cards(g, d3, sk2);\n    // println(f\"d2: {d2}\");\n    let (clear_deck, _) = decrypt_cards(g, d2, sk1); // ground truth\n\n    println(f\"clear_deck: {clear_deck}\");\n\n    // -----------------------------------------------------------------------------\n    // Individually decrypt each final ciphertext by peeling the four layers\n    // with the appropriate secret-key share order for that card.\n    // -----------------------------------------------------------------------------\n\n    // ----- Card 1: ask shares in order sk4 -> sk3 -> sk2 -> sk1 ----------------------\n    let decrypted_card_1 = final_encrypted_deck[0][1]\n        / calculate_decrypt_component(final_encrypted_deck[0][0], sk4)\n        / calculate_decrypt_component(final_encrypted_deck[0][0], sk3)\n        / calculate_decrypt_component(final_encrypted_deck[0][0], sk2)\n        / calculate_decrypt_component(final_encrypted_deck[0][0], sk1);\n    println(f\"decrypted card 1: {decrypted_card_1}\");\n    assert(clear_deck[0][1] == decrypted_card_1);\n\n    // ----- Card 2: shares sk4 -> sk3 -> sk1 -> sk2 ----------------------------------\n    let decrypted_card_2 = final_encrypted_deck[1][1]\n        / calculate_decrypt_component(final_encrypted_deck[1][0], sk4)\n        / calculate_decrypt_component(final_encrypted_deck[1][0], sk3)\n        / calculate_decrypt_component(final_encrypted_deck[1][0], sk1)\n        / calculate_decrypt_component(final_encrypted_deck[1][0], sk2);\n    println(f\"decrypted card 2: {decrypted_card_2}\");\n    assert(clear_deck[1][1] == decrypted_card_2);\n\n    // ----- Card 3: shares sk4 -> sk2 -> sk1 -> sk3 ----------------------------------\n    let decrypted_card_3 = final_encrypted_deck[2][1]\n        / calculate_decrypt_component(final_encrypted_deck[2][0], sk4)\n        / calculate_decrypt_component(final_encrypted_deck[2][0], sk2)\n        / calculate_decrypt_component(final_encrypted_deck[2][0], sk1)\n        / calculate_decrypt_component(final_encrypted_deck[2][0], sk3);\n    println(f\"decrypted card 3: {decrypted_card_3}\");\n    assert(clear_deck[2][1] == decrypted_card_3);\n\n    // ----- Card 4: shares sk3 -> sk2 -> sk1 -> sk4 ----------------------------------\n    let decrypted_card_4 = final_encrypted_deck[3][1]\n        / calculate_decrypt_component(final_encrypted_deck[3][0], sk3)\n        / calculate_decrypt_component(final_encrypted_deck[3][0], sk2)\n        / calculate_decrypt_component(final_encrypted_deck[3][0], sk1)\n        / calculate_decrypt_component(final_encrypted_deck[3][0], sk4);\n    println(f\"decrypted card 4: {decrypted_card_4}\");\n    assert(clear_deck[3][1] == decrypted_card_4);\n}\n","path":"/mnt/c/Users/latta/Desktop/rust/noir/neff-shuffle/crates/shared/src/neff_shuffle.nr"}},"names":["main"],"brillig_names":["directive_invert","directive_to_radix"]}