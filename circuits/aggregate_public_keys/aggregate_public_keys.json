{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":11908477474613478423,"abi":{"parameters":[{"name":"pks","type":{"kind":"array","length":10,"type":{"kind":"field"}},"visibility":"private"},{"name":"num_pks","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{}},"bytecode":"H4sIAAAAAAAA/+WbiVLbMBCGNwkUAgQaSMpRDnOUoxy1fCQ2R+EF+hBlGh67z9LsoC2urHSG5NeMPNYMsyEWy6/9V5+cQBr0Oh7HXz/04zkdm1QeDR2fdAxnG2oJlyu0yJ01t5IHxVqs6NiRgrR05Au/jed4UmCIajksYhwOkmQ0jEYqVj/DKH/O0jBJnweZylSapb+iLI5HWZIN8+d8GOYqiUfqJc2jF51rZfZcsc4VdnBrDOd0PRtUHmZTzqp7xaJ72pxFvasuBXPy5oTGmjb/KrBJ14DrdVXDNZpMuGnzrxGWcOh1d/S6J/XOe4fkRfr9EVjDIpw57yG978TzAIp/TyWLXCcnXlfHdSmIFLBLb1SW53hSYIhqOSzirCdeF6hrHWhARZtSWeQ6acoNHXtSEGnADSo3JU8KDFE+N+UGUFcPbC66+ThHl/C3xchcSEj0CXtHIKMJ9gXZg5/AvqJfh3K+voPe3gR6XdEDIbLIdXIgbOm4LQUR+G9R+UDgSYEhyucDYQuoaxtsLuqlg+Rm8AAhqRg+m4TfJDtUDZAje+cz+Q1yrt2OA693qfYgjy1ynYB8T8d9KYhAe4/KIOdJgSHKZ5DvAXXtg81Fg5zBA4SkYvjsEn6THFA1QI7snYD8Bjnv4QMHXh9S7UGeWOQ6AfmRjsdSEIH2EZVBzpMCQ5TPID8C6joGm4sGOYMHCEkV0Osb7+hNckLVADmyd76Q3yBnSJ448PqUag/y1CLXCcjPdDyXggi0z6gMcp4UGKJ8BvkZUNc52Fw0yBk8QEgqhs8p4TfJBVUD5Mje+Up+g3x+nOPCgdeXVHuQDyxynYD8SsdrKYhA+4rKIOdJgSHKZ5BfAXVdg81Fg5zBA4SkYvhcEn6T3FA1QI7snW/kN8g/jHPcOPA6pNqDfGiR6wTk8m82kRREoK2oDHKeFBiifAa5AuqKwOaiQc7gAUJSMXxCwm+SmKoBcmTvJOQ3yBd4jQ68Tqn2IM8scp2AXG79h1IQgfaAyiDnSYEhymeQD4C6hmBz0SDnHQ6EpGL4pITfJBlVA+TI3snJb5AvjnNkDry+pdqDPLfIdQLyOx3vpSAC7Tsqg5wnBYYon0F+B9R1DzYXDXIGDxCSikXeEn6TPFA1QI7sne/kN8jb4xwPDrx+BHvtwuMHsM+PDvxZBtaRtcmhuExvo6Hr29LX+e8m/JYbv1rjg557ZMmYb+YQfxZ1bOu4VPiZFm4tUdvQAM4fLlB5FGuwbFyT9c9Zfq4x4fumEf8313y++FzHck1yyofOinplHW0j9gt5gbVUkr/nJr/Vq37hcc9YZ7HeTyANkk/uieapPJrGNZlr7pkGXl/pQ44ty++S8c8HFfWQev4BYuMAjIBDAAA=","debug_symbols":"lZfLaoNAFED/ZdZZ6NzHmPxKKcEkJgii4qNQJP9eEyqEki7OzpnhDAyHc8ElXKrTfDvW7bUbw+FjCU13Lqe6a9fVErLn1tiX7WM1TuUwhUPMdBeq9rJ+5cV9F651U4WD5/fPXcgpECkgFFAKGAWcAokCBQX274Hsf3EZJnJMREwIJhQThgnHxHvjIhuh+79EgYk9JSJ2HrHziJ1H7DwqfrlhwjGR8DsKTODOBTuXnL5cIiYEE7hzwZ0L7lywc8GdC+5cM0zgzhV3rrhzxc4Vd664c8WzXXHnijs33Llh54Y7N9y54dluuHPDnRvu3LBzw5077tzxbHfcuePOHXfu2Lnjzh137ni2O+484c4T7jxh5wl3nnDnCc72dXEa6qapb8fXf9x1+6sc6vLUVL/L69yeX06n73472fh+6M7VZR6qx03Ps/X6Hw==","file_map":{"61":{"source":"use shared::algebra::pow;\nuse shared::utils::gen_public_key_and_aggregate_key;\n\nfn main(pks: [Field; 10], num_pks: Field) -> pub Field {\n    let mut agg_pk: Field = 1;\n    for i in 0..10 {\n        if i < num_pks as u32 {\n            agg_pk *= pks[i];\n        }\n    }\n    agg_pk\n}\n\n#[test]\nfn test_main() {\n    let generator: Field = 3;\n    let sks: [Field; 3] = [22.into(), 33.into(), 44.into()];\n    let mut pks: [Field; 10] = [0.into(); 10];\n\n    for i in 0..3 {\n        let (pk, _) = gen_public_key_and_aggregate_key(generator, sks[i], 1);\n        pks[i] = pk;\n    }\n\n    let expected_aggk: Field =\n        pow(generator, sks[0]) * pow(generator, sks[1]) * pow(generator, sks[2]);\n    let result = main(pks, 3.into());\n\n    assert(result == expected_aggk, \"Aggregated key from main() does not match expected.\");\n}\n","path":"/mnt/c/Users/latta/Desktop/rust/noir/neff-shuffle/crates/aggregate_public_keys/src/main.nr"}},"names":["main"],"brillig_names":["directive_integer_quotient","directive_invert"]}